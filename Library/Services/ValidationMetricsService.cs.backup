// E:\PROJETOS\GraphFacil\Library\Services\ValidationMetricsService.cs - Correções nas linhas problemáticas
// Este arquivo contém apenas as correções para as linhas com erro
// Adicione estes using statements no topo do arquivo:

using LotoLibrary.Models.Validation;

// CORREÇÃO LINHA 214: Substituir ResultadoValidacao por PredictionValidationResult
// ANTES: public double CalcularPrecisao(List<ResultadoValidacao> resultados)
// DEPOIS:
public double CalcularPrecisao(List<PredictionValidationResult> resultados)
{
    if (resultados == null || !resultados.Any())
        return 0.0;

    // Calcular precisão baseada nos acertos
    var totalAcertos = resultados.Sum(r => r.Acertos);
    var totalPossivel = resultados.Count * 15; // 15 números por jogo
    
    return totalPossivel > 0 ? (double)totalAcertos / totalPossivel : 0.0;
}

// CORREÇÃO LINHA 248: Substituir ResultadoValidacao por PredictionValidationResult
// ANTES: public double CalcularRecall(List<ResultadoValidacao> resultados)
// DEPOIS:
public double CalcularRecall(List<PredictionValidationResult> resultados)
{
    if (resultados == null || !resultados.Any())
        return 0.0;

    // Calcular recall baseado na taxa de acerto média
    var taxaAcertoMedia = resultados.Average(r => r.TaxaAcerto);
    return taxaAcertoMedia;
}

// MÉTODOS AUXILIARES ADICIONAIS para completar a funcionalidade:

/// <summary>
/// Calcula F1-Score baseado em precisão e recall
/// </summary>
public double CalcularF1Score(List<PredictionValidationResult> resultados)
{
    var precisao = CalcularPrecisao(resultados);
    var recall = CalcularRecall(resultados);
    
    if (precisao + recall == 0)
        return 0.0;
        
    return 2 * (precisao * recall) / (precisao + recall);
}

/// <summary>
/// Calcula acurácia média dos resultados
/// </summary>
public double CalcularAcuracia(List<PredictionValidationResult> resultados)
{
    if (resultados == null || !resultados.Any())
        return 0.0;
        
    return resultados.Average(r => r.TaxaAcerto);
}

/// <summary>
/// Gera relatório completo de métricas
/// </summary>
public ValidationMetricsReport GerarRelatorioCompleto(List<PredictionValidationResult> resultados)
{
    return new ValidationMetricsReport
    {
        TotalTestes = resultados?.Count ?? 0,
        Precisao = CalcularPrecisao(resultados),
        Recall = CalcularRecall(resultados),
        F1Score = CalcularF1Score(resultados),
        Acuracia = CalcularAcuracia(resultados),
        DataGeracao = DateTime.Now
    };
}

// CLASSE DE SUPORTE para o relatório:
public class ValidationMetricsReport
{
    public int TotalTestes { get; set; }
    public double Precisao { get; set; }
    public double Recall { get; set; }
    public double F1Score { get; set; }
    public double Acuracia { get; set; }
    public DateTime DataGeracao { get; set; }
    
    public override string ToString()
    {
        return $"Relatório de Métricas:\n" +
               $"Total de Testes: {TotalTestes}\n" +
               $"Precisão: {Precisao:P2}\n" +
               $"Recall: {Recall:P2}\n" +
               $"F1-Score: {F1Score:P2}\n" +
               $"Acurácia: {Acuracia:P2}\n" +
               $"Gerado em: {DataGeracao:dd/MM/yyyy HH:mm}";
    }
}