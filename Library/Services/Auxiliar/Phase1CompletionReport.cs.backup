// E:\PROJETOS\GraphFacil\Library\Services\Auxiliar\Phase1CompletionReport.cs
using System;
using System.Collections.Generic;
using System.Linq;
using LotoLibrary.Models.Validation;

namespace LotoLibrary.Services.Auxiliar
{
    /// <summary>
    /// Relat√≥rio de conclus√£o da Fase 1 do projeto
    /// </summary>
    public class Phase1CompletionReport
    {
        #region Properties
        public string ReportTitle { get; set; } = "Relat√≥rio de Conclus√£o - Fase 1";
        public DateTime GeneratedAt { get; set; } = DateTime.Now;
        public List<TestResult> ValidationTests { get; set; } = new List<TestResult>();
        public List<TestResult> ComponentTests { get; set; } = new List<TestResult>();
        public List<TestResult> IntegrationTests { get; set; } = new List<TestResult>();
        public List<TestResult> PerformanceTests { get; set; } = new List<TestResult>();
        public List<TestResult> EngineTests { get; set; } = new List<TestResult>();
        public List<TestResult> ModelTests { get; set; } = new List<TestResult>();
        public List<TestResult> SystemTests { get; set; } = new List<TestResult>();
        #endregion

        #region Computed Properties
        public int TotalTests => ValidationTests.Count + ComponentTests.Count + IntegrationTests.Count + 
                                PerformanceTests.Count + EngineTests.Count + ModelTests.Count + SystemTests.Count;

        public int PassedTests => GetAllTests().Count(t => t.Success);

        public int FailedTests => TotalTests - PassedTests;

        public double SuccessRate => TotalTests > 0 ? (double)PassedTests / TotalTests : 0.0;

        public bool Phase1Complete => SuccessRate >= 0.85; // 85% de sucesso m√≠nimo

        public string Status => Phase1Complete ? "COMPLETA" : "INCOMPLETA";
        #endregion

        #region Public Methods

        /// <summary>
        /// Adiciona teste de valida√ß√£o
        /// </summary>
        public void AddValidationTest(TestResult test)
        {
            ValidationTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de componente
        /// </summary>
        public void AddComponentTest(TestResult test)
        {
            ComponentTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de integra√ß√£o
        /// </summary>
        public void AddIntegrationTest(TestResult test)
        {
            IntegrationTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de performance
        /// </summary>
        public void AddPerformanceTest(TestResult test)
        {
            PerformanceTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de engine
        /// </summary>
        public void AddEngineTest(TestResult test)
        {
            EngineTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de modelo
        /// </summary>
        public void AddModelTest(TestResult test)
        {
            ModelTests.Add(test);
        }

        /// <summary>
        /// Adiciona teste de sistema
        /// </summary>
        public void AddSystemTest(TestResult test)
        {
            SystemTests.Add(test);
        }

        /// <summary>
        /// Obt√©m todos os testes
        /// </summary>
        public List<TestResult> GetAllTests()
        {
            var allTests = new List<TestResult>();
            allTests.AddRange(ValidationTests);
            allTests.AddRange(ComponentTests);
            allTests.AddRange(IntegrationTests);
            allTests.AddRange(PerformanceTests);
            allTests.AddRange(EngineTests);
            allTests.AddRange(ModelTests);
            allTests.AddRange(SystemTests);
            return allTests;
        }

        /// <summary>
        /// Obt√©m resumo por categoria
        /// </summary>
        public Dictionary<string, TestCategorySummary> GetCategorySummary()
        {
            return new Dictionary<string, TestCategorySummary>
            {
                ["Validation"] = CreateCategorySummary(ValidationTests, "Testes de Valida√ß√£o"),
                ["Component"] = CreateCategorySummary(ComponentTests, "Testes de Componente"),
                ["Integration"] = CreateCategorySummary(IntegrationTests, "Testes de Integra√ß√£o"),
                ["Performance"] = CreateCategorySummary(PerformanceTests, "Testes de Performance"),
                ["Engine"] = CreateCategorySummary(EngineTests, "Testes de Engine"),
                ["Model"] = CreateCategorySummary(ModelTests, "Testes de Modelo"),
                ["System"] = CreateCategorySummary(SystemTests, "Testes de Sistema")
            };
        }

        /// <summary>
        /// Gera relat√≥rio executivo
        /// </summary>
        public string GenerateExecutiveSummary()
        {
            var summary = $"""
                üéØ RELAT√ìRIO EXECUTIVO - FASE 1
                ================================================
                
                üìä RESUMO GERAL:
                ‚Ä¢ Status da Fase 1: {Status}
                ‚Ä¢ Taxa de Sucesso: {SuccessRate:P1}
                ‚Ä¢ Testes Executados: {TotalTests}
                ‚Ä¢ Testes Aprovados: {PassedTests}
                ‚Ä¢ Testes Reprovados: {FailedTests}
                ‚Ä¢ Data: {GeneratedAt:dd/MM/yyyy HH:mm}
                
                üìã RESUMO POR CATEGORIA:
                """;

            var categories = GetCategorySummary();
            foreach (var category in categories)
            {
                var cat = category.Value;
                var status = cat.SuccessRate >= 0.8 ? "‚úÖ" : "‚ùå";
                summary += $"\n‚Ä¢ {status} {cat.Name}: {cat.PassedTests}/{cat.TotalTests} ({cat.SuccessRate:P1})";
            }

            summary += $"""
                
                
                üéØ PR√ìXIMOS PASSOS:
                {GetNextStepsRecommendation()}
                
                ================================================
                Relat√≥rio gerado automaticamente
                """;

            return summary;
        }

        /// <summary>
        /// Gera relat√≥rio detalhado
        /// </summary>
        public string GenerateDetailedReport()
        {
            var report = GenerateExecutiveSummary();
            
            report += "\n\nüìù DETALHES DOS TESTES:\n";
            report += "================================================\n";

            var categories = GetCategorySummary();
            foreach (var category in categories)
            {
                if (category.Value.TotalTests > 0)
                {
                    report += $"\nüîç {category.Value.Name.ToUpper()}\n";
                    report += new string('-', 40) + "\n";
                    
                    var tests = GetTestsByCategory(category.Key);
                    foreach (var test in tests)
                    {
                        var status = test.Success ? "‚úÖ PASS" : "‚ùå FAIL";
                        report += $"{status} | {test.TestName}\n";
                        if (!test.Success && !string.IsNullOrEmpty(test.Message))
                        {
                            report += $"      Erro: {test.Message}\n";
                        }
                        if (!string.IsNullOrEmpty(test.Details))
                        {
                            report += $"      Detalhes: {test.Details}\n";
                        }
                    }
                }
            }

            return report;
        }

        #endregion

        #region Private Methods

        private TestCategorySummary CreateCategorySummary(List<TestResult> tests, string categoryName)
        {
            return new TestCategorySummary
            {
                Name = categoryName,
                TotalTests = tests.Count,
                PassedTests = tests.Count(t => t.Success),
                FailedTests = tests.Count(t => !t.Success),
                SuccessRate = tests.Count > 0 ? (double)tests.Count(t => t.Success) / tests.Count : 0.0
            };
        }

        private List<TestResult> GetTestsByCategory(string category)
        {
            return category.ToLower() switch
            {
                "validation" => ValidationTests,
                "component" => ComponentTests,
                "integration" => IntegrationTests,
                "performance" => PerformanceTests,
                "engine" => EngineTests,
                "model" => ModelTests,
                "system" => SystemTests,
                _ => new List<TestResult>()
            };
        }

        private string GetNextStepsRecommendation()
        {
            if (Phase1Complete)
            {
                return """
                    ‚úÖ Fase 1 CONCLU√çDA com sucesso!
                    ‚Üí Proceder para Fase 2: Ensemble Methods
                    ‚Üí Implementar BasicEnsembleModel
                    ‚Üí Configurar sistema de pesos adaptativos
                    """;
            }
            else
            {
                var failedCategories = GetCategorySummary()
                    .Where(c => c.Value.SuccessRate < 0.8 && c.Value.TotalTests > 0)
                    .Select(c => c.Value.Name)
                    .ToList();

                return $"""
                    ‚ùå Fase 1 INCOMPLETA - A√ß√£o necess√°ria:
                    ‚Üí Corrigir falhas em: {string.Join(", ", failedCategories)}
                    ‚Üí Re-executar testes ap√≥s corre√ß√µes
                    ‚Üí Atingir m√≠nimo de 85% de aprova√ß√£o
                    """;
            }
        }

        #endregion
    }

    #region Supporting Classes

    /// <summary>
    /// Resumo de uma categoria de testes
    /// </summary>
    public class TestCategorySummary
    {
        public string Name { get; set; }
        public int TotalTests { get; set; }
        public int PassedTests { get; set; }
        public int FailedTests { get; set; }
        public double SuccessRate { get; set; }
    }

    #endregion
}