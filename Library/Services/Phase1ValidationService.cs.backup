// CORREÇÃO: Removido using LotoLibrary.Utilities para evitar conflito de namespace com TestResult
// D:\PROJETOS\GraphFacil\Library\Services\Phase1ValidationService.cs - Serviço de validação da Fase 1
using LotoLibrary.Engines;
using LotoLibrary.PredictionModels.Individual;
using LotoLibrary.Suporte;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace LotoLibrary.Services
{
    /// <summary>
    /// Serviço para validar a implementação da Fase 1 e garantir que tudo funciona corretamente
    /// </summary>
    public static class Phase1ValidationService
    {
        /// <summary>
        /// Executa suite completa de testes da Fase 1
        /// </summary>
        public static async Task<Phase1ValidationReport> ExecuteValidationSuiteAsync()
        {
            var report = new Phase1ValidationReport();
            var stopwatch = Stopwatch.StartNew();

            try
            {
                Console.WriteLine("=== INICIANDO VALIDAÇÃO DA FASE 1 ===\n");

                // Teste 1: Carregar dados históricos
                report.DataLoadingTest = await TestDataLoading();
                LogTestResult("Carregamento de Dados", report.DataLoadingTest.Success);

                // Teste 2: Validar correção do bug das dezenas 1-9
                report.DezenaBugFixTest = await TestDezenaBugFix();
                LogTestResult("Correção Bug Dezenas 1-9", report.DezenaBugFixTest.Success);

                // Teste 3: Testar interfaces e classes base
                report.InterfaceImplementationTest = TestInterfaceImplementation();
                LogTestResult("Implementação de Interfaces", report.InterfaceImplementationTest.Success);

                // Teste 4: Validar MetronomoModel refatorado
                report.MetronomoModelTest = await TestMetronomoModelRefactor();
                LogTestResult("MetronomoModel Refatorado", report.MetronomoModelTest.Success);

                // Teste 5: Testar PredictionEngine
                report.PredictionEngineTest = await TestPredictionEngine();
                LogTestResult("PredictionEngine", report.PredictionEngineTest.Success);

                // Teste 6: Performance geral
                report.PerformanceTest = await TestOverallPerformance();
                LogTestResult("Performance Geral", report.PerformanceTest.Success);

                stopwatch.Stop();
                report.TotalExecutionTime = stopwatch.Elapsed;
                report.OverallSuccess = report.AllTestsPassed();

                Console.WriteLine($"\n=== VALIDAÇÃO CONCLUÍDA EM {report.TotalExecutionTime.TotalSeconds:F2}s ===");
                Console.WriteLine($"Status Geral: {(report.OverallSuccess ? "✅ PASSOU" : "❌ FALHOU")}");

                return report;
            }
            catch (Exception ex)
            {
                stopwatch.Stop();
                report.TotalExecutionTime = stopwatch.Elapsed;
                report.FatalError = ex.Message;
                report.OverallSuccess = false;

                Console.WriteLine($"❌ ERRO FATAL: {ex.Message}");
                return report;
            }
        }

        #region Individual Tests

        private static async Task<LotoLibrary.Suporte.TestResult> TestDataLoading()
        {
            try
            {
                Console.WriteLine("Testando carregamento de dados...");

                // Tentar carregar dados usando método seguro
                var dados = Infra.CarregarConcursosSeguro();

                if (dados == null || !dados.Any())
                {
                    return new TestResultXtras
                    {
                        Success = false,
                        Message = "Nenhum dado histórico carregado",
                        Details = "Verifique se o arquivo Lotofacil.json existe e está acessível"
                    };
                }

                var totalSorteios = dados.Count;
                var ultimoConcurso = dados.LastOrDefault()?.Id ?? 0;
                var primeiroConcurso = dados.FirstOrDefault()?.Id ?? 0;

                return new TestResultXtras
                {
                    Success = true,
                    Message = $"Dados carregados com sucesso: {totalSorteios} sorteios",
                    Details = $"Range: {primeiroConcurso} → {ultimoConcurso}",
                    Metrics = new Dictionary<string, object>
                    {
                        {"TotalSorteios", totalSorteios},
                        {"PrimeiroConcurso", primeiroConcurso},
                        {"UltimoConcurso", ultimoConcurso}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no carregamento: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        private static async Task<LotoLibrary.Suporte.TestResult> TestDezenaBugFix()
        {
            try
            {
                Console.WriteLine("Testando correção do bug das dezenas 1-9...");

                // Gerar múltiplos palpites para análise
                var testPredictions = new List<List<int>>();

                // Usar método de teste do DiagnosticService
                var diagnosticReport = DiagnosticService.TestarAlgoritmoAtual(50);

                if (!string.IsNullOrEmpty(diagnosticReport.ErroExecucao))
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Erro na execução do teste",
                        Details = diagnosticReport.ErroExecucao
                    };
                }

                // Critérios de sucesso:
                // 1. Pelo menos algumas dezenas 1-9 devem ser selecionadas
                // 2. Não deve haver mais de 5 dezenas nunca selecionadas
                // 3. Distribuição não deve ser severamente enviesada

                bool criterio1 = diagnosticReport.Percentual1a9 > 15; // Pelo menos 15% das seleções
                bool criterio2 = diagnosticReport.DezenasNuncaSelecionadas.Count <= 5;
                bool criterio3 = diagnosticReport.GravidadeProblema != GravidadeProblema.Critica;

                bool success = criterio1 && criterio2 && criterio3;

                return new TestResultXtras
                {
                    Success = success,
                    Message = success ? "Bug das dezenas 1-9 corrigido" : "Bug das dezenas 1-9 ainda presente",
                    Details = $"Dezenas 1-9: {diagnosticReport.Percentual1a9:F1}%, " +
                             $"Nunca selecionadas: {diagnosticReport.DezenasNuncaSelecionadas.Count}, " +
                             $"Gravidade: {diagnosticReport.GravidadeProblema}",
                    Metrics = new Dictionary<string, object>
                    {
                        {"Percentual1a9", diagnosticReport.Percentual1a9},
                        {"DezenasNuncaSelecionadas", diagnosticReport.DezenasNuncaSelecionadas.Count},
                        {"GravidadeProblema", diagnosticReport.GravidadeProblema.ToString()}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no teste de dezenas: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        private static LotoLibrary.Suporte.TestResult TestInterfaceImplementation()
        {
            try
            {
                Console.WriteLine("Testando implementação de interfaces...");

                var issues = new List<string>();

                // Testar se as interfaces podem ser instanciadas via reflection
                var interfaceTypes = new[]
                {
                    typeof(LotoLibrary.Interfaces.IPredictionModel),
                    typeof(LotoLibrary.Interfaces.IConfigurableModel),
                    typeof(LotoLibrary.Interfaces.IExplainableModel),
                    typeof(LotoLibrary.Interfaces.IEnsembleModel),
                    typeof(LotoLibrary.Interfaces.IPerformanceAnalyzer),
                    typeof(LotoLibrary.Interfaces.IModelFactory)
                };

                foreach (var interfaceType in interfaceTypes)
                {
                    if (interfaceType == null)
                    {
                        issues.Add($"Interface não encontrada no namespace");
                    }
                }

                // Testar criação de instância do MetronomoModel
                try
                {
                    var metronomoModel = new MetronomoModel();
                    if (metronomoModel == null)
                    {
                        issues.Add("Não foi possível criar instância de MetronomoModel");
                    }
                }
                catch (Exception ex)
                {
                    issues.Add($"Erro ao criar MetronomoModel: {ex.Message}");
                }

                return new TestResultXtras
                {
                    Success = !issues.Any(),
                    Message = issues.Any() ? "Problemas na implementação de interfaces" : "Interfaces implementadas corretamente",
                    Details = string.Join("; ", issues),
                    Metrics = new Dictionary<string, object>
                    {
                        {"InterfacesTestadas", interfaceTypes.Length},
                        {"ProblemasEncontrados", issues.Count}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no teste de interfaces: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        private static async Task<LotoLibrary.Suporte.TestResult> TestMetronomoModelRefactor()
        {
            try
            {
                Console.WriteLine("Testando MetronomoModel refatorado...");

                var dados = Infra.CarregarConcursosSeguro();
                if (!dados.Any())
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Sem dados para testar MetronomoModel"
                    };
                }

                var model = new MetronomoModel();

                // Teste de inicialização
                var initResult = await model.InitializeAsync(dados);
                if (!initResult)
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Falha na inicialização do MetronomoModel"
                    };
                }

                // Teste de treinamento
                var trainResult = await model.TrainAsync(dados);
                if (!trainResult)
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Falha no treinamento do MetronomoModel"
                    };
                }

                // Teste de predição
                var nextConcurso = (dados.LastOrDefault()?.Id ?? 3000) + 1;
                var prediction = await model.PredictAsync(nextConcurso);

                if (prediction == null || !prediction.PredictedNumbers.Any())
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "MetronomoModel não gerou predição válida"
                    };
                }

                // Teste de explicação (IExplainableModel)
                var explanation = model.ExplainPrediction(prediction);

                return new TestResultXtras
                {
                    Success = true,
                    Message = "MetronomoModel funcionando corretamente",
                    Details = $"Predição: {prediction.PredictedNumbers.Count} dezenas, Confiança: {prediction.OverallConfidence:P2}",
                    Metrics = new Dictionary<string, object>
                    {
                        {"DezenasGeradas", prediction.PredictedNumbers.Count},
                        {"Confianca", prediction.OverallConfidence},
                        {"TemExplicacao", explanation != null},
                        {"MetronomosAtivos", model.Metronomos.Count}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no teste do MetronomoModel: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        private static async Task<LotoLibrary.Suporte.TestResult> TestPredictionEngine()
        {
            try
            {
                Console.WriteLine("Testando PredictionEngine...");

                var dados = Infra.CarregarConcursosSeguro();
                if (!dados.Any())
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Sem dados para testar PredictionEngine"
                    };
                }

                var engine = new PredictionEngine();

                // Teste de inicialização
                var initResult = await engine.InitializeAsync(dados);
                if (!initResult)
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "Falha na inicialização do PredictionEngine"
                    };
                }

                // Teste de geração de predição
                var nextConcurso = (dados.LastOrDefault()?.Id ?? 3000) + 1;
                var prediction = await engine.GeneratePredictionAsync(nextConcurso);

                if (prediction == null || !prediction.PredictedNumbers.Any())
                {
                    return new LotoLibrary.Suporte.TestResult
                    {
                        Success = false,
                        Message = "PredictionEngine não gerou predição válida"
                    };
                }

                // Teste de diagnósticos
                await engine.RunDiagnosticsAsync();

                return new TestResultXtras
                {
                    Success = true,
                    Message = "PredictionEngine funcionando corretamente",
                    Details = $"Modelos: {engine.TotalModels}, Estratégia: {engine.ActiveStrategy}",
                    Metrics = new Dictionary<string, object>
                    {
                        {"TotalModelos", engine.TotalModels},
                        {"EstrategiaAtiva", engine.ActiveStrategy},
                        {"ConfiancaGeral", engine.OverallConfidence},
                        {"TemEnsemble", engine.HasEnsemble}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no teste do PredictionEngine: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        private static async Task<LotoLibrary.Suporte.TestResult> TestOverallPerformance()
        {
            try
            {
                Console.WriteLine("Testando performance geral...");

                var dados = Infra.CarregarConcursosSeguro();
                var engine = new PredictionEngine();

                await engine.InitializeAsync(dados);

                // Medir tempo de múltiplas predições
                var stopwatch = Stopwatch.StartNew();
                var predictions = new List<TimeSpan>();

                for (int i = 0; i < 10; i++)
                {
                    var start = Stopwatch.StartNew();
                    await engine.GeneratePredictionAsync(3500 + i);
                    start.Stop();
                    predictions.Add(start.Elapsed);
                }

                stopwatch.Stop();

                var avgTime = predictions.Average(t => t.TotalMilliseconds);
                var maxTime = predictions.Max(t => t.TotalMilliseconds);

                // Critérios de performance:
                // - Tempo médio < 2 segundos
                // - Tempo máximo < 5 segundos
                // - Sem erros de execução

                bool performanceOk = avgTime < 2000 && maxTime < 5000;

                return new TestResultXtras
                {
                    Success = performanceOk,
                    Message = performanceOk ? "Performance adequada" : "Performance abaixo do esperado",
                    Details = $"Tempo médio: {avgTime:F0}ms, Tempo máximo: {maxTime:F0}ms",
                    Metrics = new Dictionary<string, object>
                    {
                        {"TempoMedio", avgTime},
                        {"TempoMaximo", maxTime},
                        {"TotalTestes", predictions.Count},
                        {"TempoTotal", stopwatch.ElapsedMilliseconds}
                    }
                };
            }
            catch (Exception ex)
            {
                return new LotoLibrary.Suporte.TestResult
                {
                    Success = false,
                    Message = $"Erro no teste de performance: {ex.Message}",
                    Details = ex.StackTrace
                };
            }
        }

        #endregion

        #region Helper Methods

        private static void LogTestResult(string testName, bool success)
        {
            var status = success ? "✅ PASSOU" : "❌ FALHOU";
            Console.WriteLine($"  {testName}: {status}");
        }

        #endregion
    }

    #region Data Models

    public class Phase1ValidationReport
    {
        public LotoLibrary.Suporte.TestResult DataLoadingTest { get; set; }
        public LotoLibrary.Suporte.TestResult DezenaBugFixTest { get; set; }
        public LotoLibrary.Suporte.TestResult InterfaceImplementationTest { get; set; }
        public LotoLibrary.Suporte.TestResult MetronomoModelTest { get; set; }
        public LotoLibrary.Suporte.TestResult PredictionEngineTest { get; set; }
        public LotoLibrary.Suporte.TestResult PerformanceTest { get; set; }

        public TimeSpan TotalExecutionTime { get; set; }
        public bool OverallSuccess { get; set; }
        public string FatalError { get; set; }

        public bool AllTestsPassed()
        {
            return DataLoadingTest?.Success == true &&
                   DezenaBugFixTest?.Success == true &&
                   InterfaceImplementationTest?.Success == true &&
                   MetronomoModelTest?.Success == true &&
                   PredictionEngineTest?.Success == true &&
                   PerformanceTest?.Success == true &&
                   string.IsNullOrEmpty(FatalError);
        }

        public string GenerateReport()
        {
            var report = "=== RELATÓRIO DE VALIDAÇÃO - FASE 1 ===\n\n";

            report += $"Tempo Total de Execução: {TotalExecutionTime.TotalSeconds:F2}s\n";
            report += $"Status Geral: {(OverallSuccess ? "✅ PASSOU" : "❌ FALHOU")}\n\n";

            if (!string.IsNullOrEmpty(FatalError))
            {
                report += $"❌ ERRO FATAL: {FatalError}\n\n";
            }

            report += "RESULTADOS DOS TESTES:\n\n";

            report += FormatTestResult("1. Carregamento de Dados", DataLoadingTest);
            report += FormatTestResult("2. Correção Bug Dezenas 1-9", DezenaBugFixTest);
            report += FormatTestResult("3. Implementação de Interfaces", InterfaceImplementationTest);
            report += FormatTestResult("4. MetronomoModel Refatorado", MetronomoModelTest);
            report += FormatTestResult("5. PredictionEngine", PredictionEngineTest);
            report += FormatTestResult("6. Performance Geral", PerformanceTest);

            report += "\n=== FIM DO RELATÓRIO ===";

            return report;
        }

        private string FormatTestResult(string testName, LotoLibrary.Suporte.TestResult result)
        {
            if (result == null) return $"{testName}: ❌ NÃO EXECUTADO\n\n";

            var status = result.Success ? "✅ PASSOU" : "❌ FALHOU";
            var text = $"{testName}: {status}\n";
            text += $"  Mensagem: {result.Message}\n";

            if (!string.IsNullOrEmpty(result.Details))
            {
                text += $"  Detalhes: {result.Details}\n";
            }

            if (result.Metrics?.Any() == true)
            {
                text += "  Métricas:\n";
                foreach (var metric in result.Metrics)
                {
                    text += $"    • {metric.Key}: {metric.Value}\n";
                }
            }

            return text + "\n";
        }
    }

    #endregion
}