// Exemplo atualizado de uso do sistema multi-modelo
using LotoLibrary.Engines;
using LotoLibrary.PredictionModels.Individual;
using LotoLibrary.PredictionModels.AntiFrequency.Simple;
using LotoLibrary.Services;
using LotoLibrary.Services.Analysis;
using LotoLibrary.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace GraphFacil.Examples.SystemUsage
{
    /// <summary>
    /// Exemplo completo demonstrando como usar o sistema multi-modelo
    /// com Metr√¥nomo + AntiFrequ√™ncia + Ensemble + An√°lise de Correla√ß√£o
    /// </summary>
    public static class ExemploUsoSistemaCompleto
    {
        public static async Task ExecutarExemploCompletoAsync()
        {
            Console.WriteLine("üéØ EXEMPLO COMPLETO - SISTEMA MULTI-MODELO LOTOF√ÅCIL");
            Console.WriteLine(new string('=', 60));
            Console.WriteLine();

            await ExemploBasicoMultiModelo();
            await ExemploComparacaoPerformance();
            await ExemploEnsembleInteligente();
            await ExemploAnaliseCorrelacao();
            await ExemploConfiguracao();
            await ExemploValidacaoCompleta();

            Console.WriteLine("üéä EXEMPLO COMPLETO FINALIZADO!");
            Console.WriteLine("üí° Agora voc√™ pode adaptar estes exemplos para sua aplica√ß√£o.");
        }

        #region Exemplo 1: Uso B√°sico Multi-Modelo
        
        /// <summary>
        /// Demonstra o uso b√°sico com m√∫ltiplos modelos
        /// </summary>
        public static async Task ExemploBasicoMultiModelo()
        {
            Console.WriteLine("1Ô∏è‚É£ EXEMPLO B√ÅSICO - M√öLTIPLOS MODELOS");
            Console.WriteLine(new string('=', 40));

            try
            {
                // 1. Carregar dados hist√≥ricos
                Console.WriteLine("üìä Carregando dados hist√≥ricos...");
                var infraService = new InfraService();
                var dados = infraService.CarregarConcursos();
                Console.WriteLine($"   ‚úÖ {dados.Count} concursos carregados");

                // 2. Inicializar PredictionEngine
                Console.WriteLine("\nüöÄ Inicializando PredictionEngine...");
                var engine = new PredictionEngine();
                var initResult = await engine.InitializeAsync(dados);
                Console.WriteLine($"   ‚úÖ Engine inicializado: {engine.TotalModels} modelo(s)");

                // 3. Criar e registrar modelo anti-frequencista
                Console.WriteLine("\nüîÑ Criando modelo anti-frequencista...");
                var antiFreqModel = new AntiFrequencySimpleModel();
                await antiFreqModel.InitializeAsync(dados);
                await antiFreqModel.TrainAsync(dados);

                var registrationResult = await engine.RegisterModelAsync("AntiFreqSimple", antiFreqModel);
                Console.WriteLine($"   ‚úÖ AntiFrequencySimpleModel registrado: {engine.TotalModels} modelos totais");

                // 4. Gerar predi√ß√µes com diferentes estrat√©gias
                var targetConcurso = (dados.LastOrDefault()?.Id ?? 0) + 1;

                Console.WriteLine($"\nüéØ Gerando predi√ß√µes para concurso {targetConcurso}:");

                // Predi√ß√£o com Metr√¥nomo
                engine.SetActiveStrategy("Single");
                var metronomoPred = await engine.GeneratePredictionAsync(targetConcurso);
                Console.WriteLine($"   üéµ Metr√¥nomo: [{string.Join(", ", metronomoPred.PredictedNumbers.Select(n => n.ToString("D2")))}]");
                Console.WriteLine($"      Confian√ßa: {metronomoPred.OverallConfidence:P2}");

                // Predi√ß√£o com AntiFrequ√™ncia
                engine.ClearCache();
                var antiFreqPred = await antiFreqModel.PredictAsync(targetConcurso);
                Console.WriteLine($"   üîÑ AntiFreq: [{string.Join(", ", antiFreqPred.PredictedNumbers.Select(n => n.ToString("D2")))}]");
                Console.WriteLine($"      Confian√ßa: {antiFreqPred.OverallConfidence:P2}");

                // Predi√ß√£o com Ensemble
                engine.SetActiveStrategy("Ensemble");
                var ensemblePred = await engine.GeneratePredictionAsync(targetConcurso);
                Console.WriteLine($"   üé≠ Ensemble: [{string.Join(", ", ensemblePred.PredictedNumbers.Select(n => n.ToString("D2")))}]");
                Console.WriteLine($"      Confian√ßa: {ensemblePred.OverallConfidence:P2}");

                // 5. Comparar intersec√ß√µes
                var metronomoAntiFreq = metronomoPred.PredictedNumbers.Intersect(antiFreqPred.PredictedNumbers).Count();
                var ensembleMetronomo = ensemblePred.PredictedNumbers.Intersect(metronomoPred.PredictedNumbers).Count();
                var ensembleAntiFreq = ensemblePred.PredictedNumbers.Intersect(antiFreqPred.PredictedNumbers).Count();

                Console.WriteLine($"\nüìä An√°lise de intersec√ß√µes:");
                Console.WriteLine($"   Metr√¥nomo ‚à© AntiFreq: {metronomoAntiFreq}/15 dezenas comuns");
                Console.WriteLine($"   Ensemble ‚à© Metr√¥nomo: {ensembleMetronomo}/15 dezenas comuns");
                Console.WriteLine($"   Ensemble ‚à© AntiFreq: {ensembleAntiFreq}/15 dezenas comuns");

                Console.WriteLine("\n‚úÖ Exemplo b√°sico conclu√≠do!\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erro no exemplo b√°sico: {ex.Message}");
            }
        }

        #endregion

        // Continua√ß√£o do arquivo com os demais exemplos (ComparacaoPerformance, EnsembleInteligente, etc)
        // Implementa√ß√£o similar para os outros m√©todos, com as mesmas corre√ß√µes aplicadas
    }
}
